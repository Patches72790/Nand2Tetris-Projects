// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    /* Decode the higher 3 bits to find RAM chip to use mod 8*/
    Decoder3to8 (sel=address[3..5], a=selA, b=selB, c=selC, d=selD,
                                    e=selE, f=selF, g=selG, h=selH);

    /* Select input or current value depending on load  */
    Mux16 (a=aout, b=in, sel=selA, out=ain);
    Mux16 (a=bout, b=in, sel=selB, out=bin);
    Mux16 (a=cout, b=in, sel=selC, out=cin);
    Mux16 (a=dout, b=in, sel=selD, out=din);
    Mux16 (a=eout, b=in, sel=selE, out=ein);
    Mux16 (a=fout, b=in, sel=selF, out=fin);
    Mux16 (a=gout, b=in, sel=selG, out=gin);
    Mux16 (a=hout, b=in, sel=selH, out=hin);

    /* Use selected inputs to access RAM8 chips */
    RAM8 (in=ain, load=load, address=address[0..2], out=aout);
    RAM8 (in=bin, load=load, address=address[0..2], out=bout);
    RAM8 (in=cin, load=load, address=address[0..2], out=cout);
    RAM8 (in=din, load=load, address=address[0..2], out=dout);
    RAM8 (in=ein, load=load, address=address[0..2], out=eout);
    RAM8 (in=fin, load=load, address=address[0..2], out=fout);
    RAM8 (in=gin, load=load, address=address[0..2], out=gout);
    RAM8 (in=hin, load=load, address=address[0..2], out=hout);

    /* Select appropriate output from RAM8 chips used */
    Mux8Way16(a=aout, b=bout, c=cout, d=dout,
                e=eout, f=fout, g=gout, h=hout,
                sel=address[3..5], out=out);
}
