CHIP DecideJump {
    IN j1, j2, j3, /* takes the jump instruction bits and the ALU condition codes */
       zr, ng;

    OUT shouldJump; /* Determines if the next address should be used from A Register or the incremented PC. */

    PARTS:

    And (a=j3, b=true, out=selJGT); // 001
    And (a=j2, b=true, out=selJEQ); // 010
    And (a=j3, b=j2,   out=selJGE); // 011
    And (a=j1, b=true, out=selJLT); // 100
    And (a=j1, b=j3,   out=selJNE); // 101
    And (a=j1, b=j2,   out=selJLE); // 110
    And (a=j1, b=j2,   out=jmp);    // 111
    And (a=jmp, b=j3,  out=JMP);

    /* JGT == 001 ===> !zr & !ng */
    Or (a=zr, b=ng, out=zrOrng);
    Not (in=zrOrng, out=jgt);
    And (a=jgt, b=selJGT, out=JGT);

    /* JEQ == 010 ===> zr        */
    And (a=zr, b=true, out=jeq);
    And (a=jeq, b=selJEQ, out=JEQ);

    /* JGE == 011 ===> zr | !ng  */
    Not (in=ng, out=NotNG);
    Or (a=zr, b=NotNG, out=jge);
    And (a=jge, b=selJGE, out=JGE);

    /* JNE == 101 ===> !zr       */
    Not (in=zr, out=NotZR, out=jne);
    And (a=jne, b=selJNE, out=JNE);

    /* JLT == 100 ===> !zr & ng  */
    And (a=NotZR, b=ng, out=jlt);
    And (a=jlt, b=selJLT, out=JLT);

    /* JLE == 110 ===> zr | ng   */
    And (a=zrOrng, b=true, out=jle);
    And (a=jle, b=selJLE, out=JLE);

    /* Should jump if any of the J-conditions are true */
    Or8Way (in[0]=JGT, in[1]=JEQ, in[2]=JGE, in[3]=JLT, in[4]=JNE, in[5]=JLE, in[6]=JMP, in[7]=false, out=shouldJump);
}
