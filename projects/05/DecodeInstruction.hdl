/*
 * Decodes the given C instruction into its constituent parts 
 * to be used by the ALU and various other components of the CPU.
 */
CHIP DecodeInstruction {
    IN instruction[16];  /* the instruction to be decoded */

    OUT comp[6], /* the computation of the instruction */
        dest[3], /* the destination to place result of C instruction */ 
        jump[3] ,/* the destination address to jump to from JMP instruction */
        useM,    /* if instruction[12], then use Mem[A] else use A Reg */
        isCInstr; /* true if instruction[15] == 1, false if is A instruction */

    PARTS:
    /* Bit masks here for output */
    And16 (a[0..2]=true, a[3..15]=false, b=instruction, out[0..2]=jump, out[3..15]=false);
    And16 (a[3..5]=true, a[0..2]=false, a[6..15]=false, b=instruction, out[0..2]=false, out[3..5]=dest, out[6..15]=false);
    And16 (a[6..11]=true, a[0..5]=false, a[12..15]=false, b=instruction, out[0..5]=false, out[6..11]=comp, out[12..15]=false); 
    And16 (a[12]=true, a[0..11]=false, a[13..15]=false, b=instruction, out[12]=useM, out[0..11]=false, out[13..15]=false);
    And16 (a[15]=true, a[0..14]=false, b=instruction, out[15]=isCInstr, out[0..14]=false);
}
