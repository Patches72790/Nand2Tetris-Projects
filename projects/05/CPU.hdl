// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    /* Decode C Instruction here */
    DecodeInstruction (instruction=instruction, 
                       c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6,
                       d1=d1, d2=d2, d3=writeM, /* use d3 to write to memory directly */
                       j1=j1, j2=j2, j3=j3,
                       useM=useM, isCInstr=isCInstr);

    /* If instr[15] == 0, then A instruction, else C instruction */
    Mux16 (sel=isCInstr, a=instruction, b=ALUOut, out=RegAIn);

    /* Register A should be loaded if it is an A instruction */
    ARegister (in=RegAIn, out=RegAOut, load=d1, out[0..14]=addressM);

    /* Select RegA Out or Memory input for ALU */
    Mux16 (sel=useM, a=RegAOut, b=inM, out=ALUInA);

    /* Register D is second input for ALU */ 
    DRegister(in=ALUOut, out=RegDOut, load=d2);

    /* ALU Here */
    ALU (zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, 
         x=ALUInA, y=RegDOut, out=ALUOut, zr=zr, 
         ng=ng, out=outM);

    /* Select the input from A register or increment PC */ 
    DecideJump(j1=j1, j2=j2, j3=j3, zr=zr, ng=ng, shouldJump=shouldJump);
    Not (in=shouldJump, out=incrPC);
    PC (reset=reset, inc=incrPC, in=RegAOut, load=shouldJump, out[0..14]=pc);
}
